# 8.1. Додати 1 до числа
# Ваше завдання — написати функцію add_one, яка приймає список із цифр, які у свою чергу є одним числом. До нього необхідно додати 1.
# Тобто. Вам необхідно з набору цифр, що входять до списку, отримати число, скласти його з 1 і отриману суму, знову розбити на список із цифр.
# В результаті функція повертає список із цифр, що становлять значення суми.
# Так зі списку з цифрами [1, 2, 3, 4], має вийти число 1234. До нього додаємо 1, і отримуємо 1235.
# Після цього потрібно розбити отримане число на складові цифри.
# У результаті має бути список [1, 2, 3, 5], який повертає функція.
# Якщо ви хочете себе перевірити, використайте цей unit test
#
#
# def add_one(some_list):
#     pass
# assert add_one([1, 2, 3, 4]) == [1, 2, 3, 5], 'Test1'
# assert add_one([9, 9, 9]) == [1, 0, 0, 0], 'Test2'
# assert add_one([0]) == [1], 'Test3'
# assert add_one([9]) == [1, 0], 'Test4'
# print("ОК")

def add_one(some_list):
    """
    Функция для добавления 1 к числу, представленному списком цифр.
    :param some_list: Список цифр, представляющих число.
    :return: Список цифр, представляющих число, увеличенное на 1.
    """
    # Преобразуем список цифр в строку, затем в целое число
    number = int(''.join(map(str, some_list)))

    # Добавляем 1 к числу
    number += 1

    # Преобразуем полученное число обратно в список цифр и возвращаем его
    return [int(digit) for digit in str(number)]

# Тесты
assert add_one([1, 2, 3, 4]) == [1, 2, 3, 5], 'Test1'
assert add_one([9, 9, 9]) == [1, 0, 0, 0], 'Test2'
assert add_one([0]) == [1], 'Test3'
assert add_one([9]) == [1, 0], 'Test4'
print("ОК")
